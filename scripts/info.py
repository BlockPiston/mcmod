"""
Get or set info fields of the current mod

Note changing the mod name will also change the modid, and edit the Java files accordingly,
but will not change the folder name or eclipse project name.

Usage:
    mcmod info [FIELD VALUE]

Args:
    FIELD   the field to set
    VALUE   the value to set the field to

Fields:
    The following fields can be set:

    FIELD           VALUE
    name            the name of the mod
    desc[ription]   the long description of the mod
    credits         the credits of the mod
    url             the url of the mod
    version         the version of the mod
"""

import os

def edit_java_package(args):
    file, old_modid, new_modid = args
    with open(file, "r", encoding="utf-8") as f:
        content = [x for x in f]
    with open(file, "w", encoding="utf-8") as f2:
        for line in content:
            if line.startswith("package "):
                line = line.replace(old_modid, new_modid)
            if line.startswith("import "):
                line = line.replace(old_modid, new_modid)
            f2.write(line)

    return file

def refactor_modid(root, old_modid, new_modid, coremod_class, version):
    old_source_root = mcmod.source_root_from_modid(old_modid)
    new_source_root = mcmod.source_root_from_modid(new_modid)
    old_asset_root = mcmod.asset_root_from_modid(old_modid)
    new_asset_root = mcmod.asset_root_from_modid(new_modid)
    if old_modid != new_modid:
        os.rename(os.path.join(root, old_source_root), os.path.join(root, new_source_root))
        os.rename(os.path.join(root, old_asset_root), os.path.join(root, new_asset_root))
    
    modinfo_java = os.path.join(root, new_source_root, "ModInfo.java")
    group = mcmod.group_from_modid(new_modid)
    with open(modinfo_java, "w", encoding="utf-8") as f:
        f.write(f"""package {mcmod.group_from_modid(old_modid)};
// This file is automatically generated
// Do not edit this file directly
public interface ModInfo {{
    String Id = "{new_modid}";
    String Version = "{version}";
    String Group = "{group}";
    String GroupSlashed = "{group.replace(".", "/")}";
}}
""")
        f.flush()

    if coremod_class:
        coremodinfo_java = os.path.join(root, new_source_root, "coremod", "CoremodInfo.java")
        coremod_group = mcmod.coremod_group_from_modid(new_modid)
        with open(coremodinfo_java, "w", encoding="utf-8") as f:
            f.write(f"""package {mcmod.coremod_group_from_modid(old_modid)};
// This file is automatically generated
// Do not edit this file directly
public interface CoremodInfo {{
    String Id = "{new_modid}";
    String Version = "{version}";
    String Group = "{group}";
    String GroupSlashed = "{group.replace(".", "/")}";
    String CoremodGroup = "{coremod_group}";
    String CoremodGroupSlashed = "{coremod_group.replace(".", "/")}";
}}
""")
            f.flush()
    
    if old_modid != new_modid: 
        tasks = []
            
        for root, _, files in os.walk(os.path.join(root, new_source_root)):
            for f in files:
                if f.endswith(".java"):
                    file = os.path.join(root, f)
                    tasks.append((file, old_modid, new_modid))
        with multiprocessing.Pool() as pool:
            for file in pool.imap_unordered(edit_java_package, tasks):
                print("edited " + file)


if __name__ == "__main__":
    import sys
    import multiprocessing
    import mcmod

    mcmod.bootstrap_help()

    if len(sys.argv) != 1:
        if len(sys.argv) != 3:
            mcmod.print_help()
            exit(1)
        SET = True
    else:
        SET = False

    root = mcmod.find_root()

    # read fields
    info = mcmod.read_mcmod_info(root)
    name = info["name"]
    description = info["description"]
    credits = info["credits"]
    url = info["url"]
    version = mcmod.read_version(root)
    coremod_class = mcmod.read_coremod_class(root)
    if not coremod_class:
        coremod_class = ""

    old_modid = mcmod.modid_from_name(name)

    if SET:
        field = sys.argv[1]
        value = sys.argv[2]
        if field == "name":
            name = value
        elif field == "description" or field == "desc":
            description = value
        elif field == "credits":
            credits = value
        elif field == "url":
            url = value
        elif field == "version":
            version = value
        else:
            print("not a valid field: " + field)
            print("try `mcmod info help`")
            exit(1)

    modid = mcmod.modid_from_name(name)
    archive_base_name = mcmod.archive_base_name_from_name(name)
    group = mcmod.group_from_modid(modid)
    if coremod_class:
        coremod_class = coremod_class.replace(
            mcmod.coremod_group_from_modid(old_modid),
            mcmod.coremod_group_from_modid(modid)
        )


    if not SET:
        print("Fields:")
        print("  name        " + name)
        print("  description " + description)
        print("  credits     " + credits)
        print("  url         " + url)
        print("  version     " + version)
        print("  coremod     " + coremod_class)
        print("Derived Fields:")
        print("  modid       " + modid)
        print("  archive     " + archive_base_name)
        print("  group       " + group)
        exit(0)

    if old_modid != modid:
        print(f"about to change modid from {old_modid} to {modid}. refactoring maybe incomplete if you hardcoded values that depend on the modid.")
        if input("continue? (y/n) ") != "y":
            exit(1)

    try:
        refactor_modid(root, old_modid, modid, coremod_class, version)
    except Exception as e:
        print(e)
        print("refactoring failed, not making other changes")
        exit(1)

    # write fields
    info["name"] = name
    info["description"] = description
    info["credits"] = credits
    info["url"] = url
    info["modid"] = modid

    mcmod.write_mcmod_info(root, info)
    mcmod.write_build_gradle(
        root,
        version,
        group,
        archive_base_name,
        coremod_class
    )
